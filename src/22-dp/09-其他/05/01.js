/*
695. 岛屿的最大面积
给定一个包含了一些 0 和 1 的非空二维数组 grid 。

一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)


示例 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]

对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。

示例 2:
[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。

注意: 给定的矩阵grid 的长度和宽度都不超过 50。

 */
/**
 * 动态规划不行啊！！！！！！！！
 * 没有办法获得正确的面积
 * @param a
 */
function solution(a) {
  const row = a.length
  const column = a[0].length
  let max = 0
  const f = Array.from({ length: row + 1 }, () => Array.from({ length: column + 1 }, () => new Set()))
  for (let r = 1; r <= row; r++) {
    for (let c = 1; c <= column; c++) {
      if (a[r - 1][c - 1] === 0) {
        continue
      }

      f[r][c] = new Set([r - 1 + '-' + (c - 1), ...f[r - 1][c], ...f[r][c - 1]])
      max = Math.max(max, f[r][c].size)
    }
  }
  return max
}

module.exports = solution
