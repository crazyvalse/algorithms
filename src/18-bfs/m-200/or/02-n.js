/*
200. 岛屿数量

给你一个由  '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

示例 1：
输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1

示例 2：
输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3


提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] 的值为 '0' 或 '1'

 */
/**
 * bfs:
 * 思路：
 * 1. 找到第一个非0的节点
 * 2. 从这个节点开始遍历 row
 * 3. 把非0的塞到queue中
 * 4. 处理queue中的数据，并把下一层的非0节点塞到queue中
 *
 * - 处理到最后
 *
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function (grid) {
  let result = 0

  return result
}

module.exports = numIslands
